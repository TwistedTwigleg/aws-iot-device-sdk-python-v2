name: Manual-Release

env:
  # GITHUB_TOKEN: ${{ github.token }}
  GITHUB_TOKEN: ${{ secrets.TAG_PR_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: "Release type:"
        required: true
        options:
          - bug fix (PATCH)
          - new feature (MINOR)
      release_title:
        description: "The title of the release"
        required: true

jobs:
  update-version:
    runs-on: ubuntu-20.04 # latest
    permissions:
      contents: write # allow push
      pull-requests: write
      id-token: write # This is required for requesting the JWT

    steps:
    - name: Checkout Sources
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Make new release
      env:
        Title: ${{ github.event.inputs.release_title }}
      run: |
        Title=$(echo ${Title//[\"]\\\"})
        Title=$(echo ${Title//[\']\\\'})
        Title=$(echo ${Title//[\$]})
        ./utils/publish-release.sh "${{ github.event.inputs.release_type }}" "$Title"

    - name: Generate documentation
      run: |
        python3 -m pip install sphinx
        python3 -m pip install --verbose .
        ./make-docs.py

    - name: Commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add --force docs/
        current_version=$(git describe --tags --abbrev=0)
        git commit --message="Update Docs: ${current_version}"

    - name: Push to docs branch
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ github.token }}
        branch: docs
        # Force push so that `docs` branch always looks like `main`,
        # but with 1 additional "update docs" commit.
        # This seems simpler than trying to cleanly merge `main` into
        # `docs` each time.
        force: true
